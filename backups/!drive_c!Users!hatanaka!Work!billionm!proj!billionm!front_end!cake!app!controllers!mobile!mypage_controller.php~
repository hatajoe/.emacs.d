<?php
// ユーザ側根底コントローラインポート
require CONTROLLERS . "user_app_controller.php";

/**
 * マイページ
 *
 * @author onishi
 */
class MypageController extends UserAppController {

    var $name = "Mypage";
    var $uses = array();
    var $components = array("Mobile",
                            "Ktai",
                            "PeopleApi",
                            "AvatarApi",
                            "TextdataApi",
                            "BlacklistApi",
                            );

    public function beforeFilter() {

        parent::beforeFilter();

        // 設定ファイルを読み込む
        $this->setMixConfig();
        // 設定ファイルを読み込む
        config("defines/gacha_defines");
    }

    /**
     * index
     */
    public function index($flaFlg = FLG_OFF, $noCmFlg = FLG_OFF) {

        config('level_config');
        $this->LevelConfig = new LevelConfig();
        //----------------------------------------
        // 外部クラスのインスタンス化
        //----------------------------------------
        $this->MCard                = ClassRegistry::init("MCard");
        $this->MKbossEvent          = ClassRegistry::init("MKbossEvent");
        $this->MDiaryCampaign       = ClassRegistry::init("MDiaryCampaign");
        $this->MInfo                = ClassRegistry::init("MInfo");
        $this->TMember              = ClassRegistry::init("TMember");
        $this->TMemberCard          = ClassRegistry::init("TMemberCard");
        $this->TMemberStorage       = ClassRegistry::init("TMemberStorage");
        $this->TMemberPresent       = ClassRegistry::init("TMemberPresent");
        $this->TMemberTrade         = ClassRegistry::init("TMemberTrade");
        $this->TMemberAct           = ClassRegistry::init("TMemberAct");
        $this->TFriendTmp           = ClassRegistry::init("TFriendTmp");
        $this->TContactHistory      = ClassRegistry::init("TContactHistory");
        $this->TMemberKbossBattleLog= ClassRegistry::init("TMemberKbossBattleLog");
        $this->TMemberKbossBattle   = ClassRegistry::init("TMemberKbossBattle");
        $this->TMemberBeginnerCampaign = ClassRegistry::init("TMemberBeginnerCampaign");
        $this->MSerialCampaign      = ClassRegistry::init("MSerialCampaign");

        $isiOS = $this->_isiOS();

        // ログインボーナス
        $isLoginBonus = $this->_loginBonus();
        if($this->MOBILE_DATA['carrier'] == "pc" && $isiOS && $isLoginBonus){
            $this->readSPSwf(SITE_URL."/mypage/loginBonusFlash");
            return;
        }

        $this->TMember->updateLogin($this->member["id"]);
        $member = $this->TMember->getMemberMypage($this->member["id"]);
        $member = $this->_recoveryAll($member, false);
        $member["name"] = $this->_getNickname($this->member["id"]);
        // 仲間最大数
        $member["friend_max"] = $this->LevelConfig->getFriendNum($member["lv"]);
        // 自己紹介
        $profileText = "";
        if (!empty($member["comment_id"])) {
            $profileText = $this->_getTextData(TEXTDATA_GROUP_NAME_PROFILE, $member["comment_id"]);
//            if (is_array($textData) && !empty($textData["entry"]["comment"])) {
//                $profileText = $this->reConvertTextForApi($textData["entry"]["comment"]);
//            }
        }

        // CM演出
        if($noCmFlg == FLG_OFF){
            $cmId = $this->_outputCM($member);
            if($this->MOBILE_DATA['carrier'] == "pc" && $isiOS && !empty($cmId)){
                $this->readSPSwf(SITE_URL."/mypage/cmFlash/" . $cmId);
                return;
            }
        }
        $mustOutputGachaCm = $this->_outputGachaCM($member);
        if($this->MOBILE_DATA['carrier'] == "pc" && $isiOS && $mustOutputGachaCm){
            $this->readSPSwf(SITE_URL."/mypage/gachaCmFlash");
            return;
        }

        // 称号
        if(!empty($member["m_title_id"])){
            $this->MTitle = ClassRegistry::init("MTitle");
            $title = $this->MTitle->getDataById($member["m_title_id"]);
            $member["title"] = $title["name"];
        }
        $this->TMemberTitle     = ClassRegistry::init("TMemberTitle");
        $tMemberTitleList = $this->TMemberTitle->getTitleList($this->member["id"]);
        $titleCnt = count($tMemberTitleList);

        $leader = $this->TMemberCard->getCard($this->member["id"], $member["t_member_card_id"]);

        //// 参加中キングボス
        //$KbossLogList = $this->TMemberKbossBattleLog->getEntryBattleId($this->member["id"]);
        //if(!empty($KbossLogList)){
        //    // 最も早く終わる継続中バトル
        //    $nowKbossBattle = $this->TMemberKbossBattle->getBattleDataLimitFirst($KbossLogList);
        //} else {
        //    $nowKbossBattle = array();
        //}
        //// 報酬未取得データ
        //$KbossLogList = $this->TMemberKbossBattleLog->getNotReceiptIds($this->member["id"]);
        //if(!empty($KbossLogList)){
        //    // 最も早く終わる継続中バトル
        //    $notReceiptKbossBattle = $this->TMemberKbossBattle->getNotReceiptBattleDataList($KbossLogList);
        //} else {
        //    $notReceiptKbossBattle = array();
        //}

        // 救援要請一覧
        $nowRescueKbossBattle = array();
        $KbossLogList = $this->TMemberKbossBattleLog->getEntryBattleId($this->member["id"],1);
        if(!empty($KbossLogList)){
            // 新着
            $nowRescueKbossBattle = $this->TMemberKbossBattle->getBattleDataLast($KbossLogList);
            if(!empty($nowRescueKbossBattle)){
                $nowRescueKbossBattle["nickname"] = $this->_getNickname($nowRescueKbossBattle["t_member_id"]);
            }
        }
        // 参加中(救援要請除く)
        $nowKbossBattle = array();
        $KbossLogList = $this->TMemberKbossBattleLog->getEntryBattleId($this->member["id"],2);
        if(!empty($KbossLogList)){
            // 最も早く終わる継続中バトル
            //$nowKbossBattle = $this->TMemberKbossBattle->getBattleDataLimitFirst($KbossLogList);
            // 自分新着
            $nowKbossBattleData = $this->TMemberKbossBattle->getBattleDataLast($KbossLogList,$this->member["id"]);
            if(empty($nowKbossBattleData)){
                $nowKbossBattleData = $this->TMemberKbossBattle->getBattleDataLast($KbossLogList,$this->member["id"],1);
            }
            if(!empty($nowKbossBattleData)){
                $this->MKboss = ClassRegistry::init("MKboss");
                $mKBoss = $this->MKboss->getDataById($nowKbossBattleData["m_kboss_id"]);
                $name = $mKBoss["name".$nowKbossBattleData["kboss_no"]];
                $lv = $mKBoss["lv"];
                $nowKbossBattle = array("id" => $nowKbossBattleData["id"], "name" => $name, "lv" => $lv, "date_end" => $nowKbossBattleData["date_end"] );
            }
        }
        // 参加データが無ければ未取得報酬
        $notReceiptKbossBattle = array();
        if(empty($nowKbossBattle)){
            $KbossLogList = $this->TMemberKbossBattleLog->getNotReceiptIds($this->member["id"]);
            if(!empty($KbossLogList)){
                // 最も早く終わる継続中バトル
                $notReceiptKbossBattle = $this->TMemberKbossBattle->getNotReceiptBattleDataList($KbossLogList);
            }
        }

        // 倉庫情報
        $tMemberStorageCardNum     = $this->TMemberStorage->getTMemberStorageCardNum($this->member["id"]);

        // デッキ表示用データ
        if($flaFlg == FLG_OFF){
//	        $totalAtk = $leader["atk"];
//	        $totalDef = $leader["def"];
            $highStatusCards = array(1 => array("m_card_id" => 0),
                                     2 => array("m_card_id" => 0),
                                     3 => array("m_card_id" => 0),
                                     4 => array("m_card_id" => 0),
                                     5 => array("m_card_id" => 0),
                                     6 => array("m_card_id" => 0),
                                     7 => array("m_card_id" => 0),
                                     8 => array("m_card_id" => 0),
                                     9 => array("m_card_id" => 0),
                                     );
            $highStatusData = $this->TMemberCard->getMemberCardsHigh($this->member["id"], 9);
            if (!empty($highStatusData)) {

                $i = 1;
                foreach ($highStatusData as $key => $value) {
                    $highStatusCards[$i] = array("m_card_id" => $value[0]["m_card_id"]);

//	                $totalAtk = $totalAtk + $value[0]["atk"];
//	                $totalDef = $totalDef + $value[0]["def"];

                    $i++;
                }
            }
            $this->set("highStatusCards"       , $highStatusCards);

        }

        // 仲間申請数
        $applyCount = $this->TFriendTmp->countFriendTmpTo($this->member["id"]);

        //-----------------------------
        // 交流履歴
        //-----------------------------
        $data = $this->TContactHistory->getTContactHistoriesForMe($this->member["id"],"",3);
        $idList       = array();
        $tContactHistories = array();
        foreach ($data as $key => $value) {

            $value = $value["TContactHistory"];

            $value["from_name"] = $this->_getNickname($value["t_member_id_from"]);

            // テキストデータ
            $value["text"] = "";
            if (!empty($value["text_id"])) {
                $value["text"] = $this->_getTextData(TEXTDATA_GROUP_NAME_CONTACT_COMMENT, $value["text_id"]);
//            	$textData = $this->TextdataApi->getTextdataById(TEXTDATA_GROUP_NAME_CONTACT_COMMENT, $value["text_id"]);
//                if (is_array($textData) && count($textData) > 0 && isset($textData["entry"]["comment"])) {
//                    $text = $this->reConvertTextForApi($textData["entry"]["comment"]);
//                }
            }
//            $value["text"] = $text;

            $tContactHistories[] = $value;

            if(!in_array($value["t_member_id_from"], $idList)){
                $idList[]      = $value["t_member_id_from"];
            }

        }
        $avatarUrls = array();
        if (!empty($tContactHistories)) {
            // リーダーカード情報を取得
            $memberLeaderCards = $this->TMemberCard->getMemberLeaderCardsByIdList($idList);
            $data = $tContactHistories;
            $tContactHistories = array();
            foreach ($data as $key => $value) {

                // 会員リーダーカード
                foreach ($memberLeaderCards as $key3 => $memberLeaderCard) {
                    if ($value["t_member_id_from"] == $memberLeaderCard["TMemberCard"]["t_member_id"]) {
                        $value["TMemberCard"] = $memberLeaderCard["TMemberCard"];
                        $mCard = $this->MCard->getDataById($memberLeaderCard["TMemberCard"]["m_card_id"]);
                        $value["MCard"] = $mCard;
                        break;
                    }
                }

                $tContactHistories[] = $value;
            }
//            $avatarUrls = $this->_getAvatars($idList);
        }

        // レイドボスイベント情報
        $mKbossEvent     = $this->MKbossEvent->getNowEvent();
        $mKbossEventDiff = strtotime($mKbossEvent["end_date"]) - strtotime(now());
        $lastKbossEndDate = null;
        if (empty($mKbossEvent)) {
            $lastKbossEvent = $this->MKbossEvent->getLastEvent();
            $lastKbossEndDate = date("n/j", strtotime($lastKbossEvent["end_date"]));
        }

        // お知らせ
        $infoList = $this->MInfo->getTopInfos();

        // 仲間の動向
        $acts = $this->TMemberAct->getActs($this->member["id"]);
        if(!empty($acts)){
            foreach($acts as $key=>$act){
                $acts[$key]["nickname"] = $this->_getNickname($act["TMemberAct"]["t_member_id"]);
            }
        }

        // プレゼント数
        $presentCount   = $this->TMemberPresent->getCount($this->member["id"]);

        // 新着トレード
        $trade = array();
        $trade["applyCount"]  = $this->TMemberTrade->getTradeCount($this->member["id"], '1', TRADE_STATUS_APPLY);
        $trade["acceptCount"] = $this->TMemberTrade->getTradeCount($this->member["id"], '0', TRADE_STATUS_ACCEPT);
        $trade["count"]       = $this->TMemberTrade->getTradeCount($this->member["id"]);

        // 日記キャンペーン
        $mDiaryCampaign = $this->MDiaryCampaign->getOpenMDiaryCampaign();

        // 経過日数を算出する
        $lag = CommonUtilComponent::getLagDay($member["created"], date("Y-m-d H:i:s"));
        // 会員日記キャンペーン
        $tMemberBeginnerCampaign = $this->TMemberBeginnerCampaign->getTMemberBeginnerCampaign($this->member["id"]);
        $clearNum   = 0;
        $receiveNum = 0;
        $count = ($lag["day"] > 5)? 5: $lag["day"];
        for($i=1;$i<=$count;$i++){
            $clearNum   += $tMemberBeginnerCampaign["clear_flg_{$i}"];
            $receiveNum += $tMemberBeginnerCampaign["receive_flg_{$i}"];
            $clearNum   += $tMemberBeginnerCampaign["all_clear_flg"];
            $receiveNum += $tMemberBeginnerCampaign["all_receive_flg"];
        }

        // アルカナ覚醒
        $this->TMemberArcana = ClassRegistry::init("TMemberArcana");
        $arcana = $this->TMemberArcana->getArcanaGage($this->member["id"]);
        if(!empty($arcana)){
            $imgNum = floor($arcana["arcana_gage"] / 5) * 5;
            $arcana_end_date = empty($arcana["arcana_end_date"]) ? 0 : strtotime($arcana["arcana_end_date"]);
            $arcana_time = 0;
            $time = time();
            if($arcana_end_date >= $time){
                $limit = $arcana_end_date - $time;
                if($limit < 60){
                    $arcana_time = $limit."秒";
                } else if($limit < 3600){
                    $arcana_time = floor($limit / 60)."分";
                } else {
                    $arcana_time = intval(gmdate("H", $limit)) . "時間" . intval(gmdate("i", $limit)) . "分";
                }
            }
            $arcana_num = array("imgNum" => $imgNum, "num" => $arcana["arcana_gage"],"limit" => $arcana_time);
        } else {
            $arcana_num = array("imgNum" => 0, "num" => 0);
        }

        // シリアルキャンペーン
        $serialCampaigns = $this->MSerialCampaign->getOpeningSerialCampaigns();
        $mSerialCampaign = array();
        if (is_array($serialCampaigns)) {
            foreach ($serialCampaigns as $value) {
                $mSerialCampaign[$value["MSerialCampaign"]["id"]] = $value["MSerialCampaign"];
            }
        }

        //マイページリンクタグ
        $tag = "/?guid=ON&url=" . urlencode(SITE_URL . "/mypage/id/{$this->member["id"]}/?guid=ON");
        $mbMyPageLinkTag = APPLI_URL . $tag;
        $spMyPageLinkTag = APPLI_URL_SP . $tag;

        $newCnt = 0;
        if($applyCount > 0)			$newCnt++;
        if($presentCount > 0)			$newCnt++;
        if(($trade["applyCount"] > 0) || ($trade["acceptCount"] > 0) || ($trade["count"] > 0))	$newCnt++;
        if($member["stup"] > 0)			$newCnt++;
//        if($member["card_num"] >= $member["card_max"])	$newCnt++;
        if($member["login_gacha_status"] != GACHA_STATUS_END)	$newCnt++;

        $this->set("member"                , $member);
        $this->set("leader"                , $leader);
        $this->set("tMemberStorageCardNum" , $tMemberStorageCardNum);
        $this->set("profileText"           , $profileText);
        $this->set("applyCount"            , $applyCount);
        $this->set("tContactHistories"     , $tContactHistories);
        $this->set("avatarUrls"            , $avatarUrls);
        $this->set("infoList"              , $infoList);
        $this->set("presentCount"          , $presentCount);
        $this->set("trade"                 , $trade);
        $this->set("newCnt"                , $newCnt);
        $this->set("acts"                  , $acts);
        $this->set("nowKbossBattle"        , $nowKbossBattle);
        $this->set("nowRescueKbossBattle"  , $nowRescueKbossBattle);
        $this->set("notReceiptKbossBattle" , $notReceiptKbossBattle);
        if($this->MOBILE_DATA['carrier'] == "pc"){
            if($flaFlg == FLG_ON){
                $this->layout = "sp_swf_in_ret";
                $swfName = SITE_URL."/mypage/mypage_flash";
                $this->set("swfName", $swfName);
                $this->set("isiOS", $isiOS);
            }
        }

        $this->set("mbMyPageLinkTag", $mbMyPageLinkTag);
        $this->set("spMyPageLinkTag", $spMyPageLinkTag);
        $this->set("flaFlg"         , $flaFlg);
        $this->set("mKbossEvent"    , $mKbossEvent);
        $this->set("mKbossEventDiff", $mKbossEventDiff);
        $this->set("mDiaryCampaign" , $mDiaryCampaign);
        $this->set("arcanaNum"      , $arcana_num);
        $this->set("titleCnt"       , $titleCnt);
        $this->set("lag"            , $lag);
        $this->set("tMemberBeginnerCampaign" , $tMemberBeginnerCampaign);
        $this->set("clearNum"       , $clearNum);
        $this->set("receiveNum"     , $receiveNum);
        $this->set("mSerialCampaign", $mSerialCampaign);
        $this->set("lastKbossEndDate", $lastKbossEndDate);

    }

    /**
     * 他人のページ
     */
    public function id($id = null){

        if(empty($id)){
            $this->toError($id);
            return;
        }

        if($id == $this->member["id"])	$this->redirect("/mypage/index");

        // 設定ファイル読み込み
        $this->setAppConfig();

        //-----------------------------------------
        // 使用する外部クラスをインスタンス化する
        //-----------------------------------------
        $this->MCard              = ClassRegistry::init("MCard");
        $this->MSkill             = ClassRegistry::init("MSkill");
        $this->MItem              = ClassRegistry::init("MItem");
        $this->TMember            = ClassRegistry::init("TMember");
        $this->TMemberCard        = ClassRegistry::init("TMemberCard");
        $this->TMemberCardCollection = ClassRegistry::init("TMemberCardCollection");
        $this->TMemberItem        = ClassRegistry::init("TMemberItem");
        $this->TMemberTrade       = ClassRegistry::init("TMemberTrade");
        $this->TMemberSeries      = ClassRegistry::init("TMemberSeries");
        $this->TMemberWant        = ClassRegistry::init("TMemberWant");
        $this->TMemberStorage     = ClassRegistry::init("TMemberStorage");
        $this->TMemberStage       = ClassRegistry::init("TMemberStage");
        $this->TContactHistory    = ClassRegistry::init("TContactHistory");
        $this->TFriendTmp         = ClassRegistry::init("TFriendTmp");
        $this->TFriend            = ClassRegistry::init("TFriend");

        //-----------------------------------------
        // データを取得する
        //-----------------------------------------
        $memberId = $this->member["id"];

        //会員を取得
        $myMember = $this->TMember->getMemberFrepage($memberId);
        $member = $this->TMember->getMemberFrepage($id);

        $member["name"] = $this->_getNickname($id);
        $member["profileUrl"] = $this->_getProfUrl($id);

        $tMemberCardCollection    = $this->TMemberCardCollection->getCollectionsByList($id);
        $member["collection_num"] = count($tMemberCardCollection);

        // 称号
        if(!empty($member["m_title_id"])){
            $this->MTitle = ClassRegistry::init("MTitle");
            $title = $this->MTitle->getDataById($member["m_title_id"]);
            $member["title"] = $title["name"];
        }


        //----------------------------------------
        // ブラックリスト
        //----------------------------------------
        $isBlackList = $this->isBlackList($member["id"]);
//            $this->render("/errors/black_list");
//            return;
//        }

//        // 会員アバター情報
//        $member["avatarUrl"] = $this->_getAvatarUrl($member["id"], PV_AVATAR_SIZE_LARGE);
//        $member["avatarUrl"] = $avatarUrl;

        //リーダーカードの情報を取得
        $leaderCard = array();
        $leaderCard["TMemberCard"] = $this->TMemberCard->getLeaderCard($id);
        $leaderCard["MCard"]       = $this->MCard->getDataById($leaderCard["TMemberCard"]["m_card_id"]);
        $leaderCard["MSkill"]      = $this->MSkill->getDataById($leaderCard["MCard"]["m_skill_id"]);

        // デッキ表示用データ
//        if($flaFlg == FLG_OFF){
            $highStatusCards = array(1 => array("m_card_id" => 0),
                                     2 => array("m_card_id" => 0),
                                     3 => array("m_card_id" => 0),
                                     4 => array("m_card_id" => 0),
                                     5 => array("m_card_id" => 0),
                                     6 => array("m_card_id" => 0),
                                     7 => array("m_card_id" => 0),
                                     8 => array("m_card_id" => 0),
                                     9 => array("m_card_id" => 0),
                                     );
            $highStatusData = $this->TMemberCard->getMemberCardsHigh($id, 9);
            if (!empty($highStatusData)) {

                $i = 1;
                foreach ($highStatusData as $key => $value) {
                    $highStatusCards[$i] = array("m_card_id" => $value[0]["m_card_id"]);
                    $i++;
                }
            }
//        }

        // 自己紹介
        $profileText = "";
        if (!empty($member["comment_id"])) {
//            $textData = $this->TextdataApi->getTextdataById(TEXTDATA_GROUP_NAME_PROFILE, $member["comment_id"]);
//            if (is_array($textData) && !empty($textData["entry"]["comment"])) {
//                $profileText = $this->reConvertTextForApi($textData["entry"]["comment"]);
//            }
            $profileText = $this->_getTextData(TEXTDATA_GROUP_NAME_PROFILE, $member["comment_id"]);
        }

        // 交流履歴
        $data = $this->TContactHistory->getTContactHistoriesForMe($id,"",3);
        $idList       = array();
        $tContactHistories = array();
        foreach ($data as $key => $value) {

            $value = $value["TContactHistory"];

            // 相手名前
            $from = $this->TMember->getMemberForList($value["t_member_id_from"]);
            if (!empty($from)) {
                $value["t_member_id"] = $from["id"];
                $value["from_name"]   = $this->_getNickname($from["id"]);

                // テキストデータ
                $value["text"] = "";
                if (!empty($value["text_id"])) {
//                    $textData = $this->TextdataApi->getTextdataById(TEXTDATA_GROUP_NAME_CONTACT_COMMENT, $value["text_id"]);
//                    if (is_array($textData) && count($textData) > 0) {
//                        $text = $this->reConvertTextForApi($textData["entry"]["comment"]);
//                    }
                    $value["text"] = $this->_getTextData(TEXTDATA_GROUP_NAME_CONTACT_COMMENT, $value["text_id"]);
                }
//                $value["text"] = $text;
                $value["text_modified"] = $value["modified"];

                $tContactHistories[] = $value;

                if(!in_array($from["id"], $idList)){
                    $idList[]       = $from["id"];
                }
            }
        }
        $avatarUrls = array();
        if (!empty($tContactHistories)) {
            // リーダーカード情報を取得
            $memberLeaderCards = $this->TMemberCard->getMemberLeaderCardsByIdList($idList);
//            // アバターを取得
//            $memberAvatars = $this->AvatarApi->getAvatarThumbnailList($idList);
            $data = $tContactHistories;
            $tContactHistories = array();
            foreach ($data as $key => $value) {

                // 会員リーダーカード
                foreach ($memberLeaderCards as $key3 => $memberLeaderCard) {
                    if ($value["t_member_id"] == $memberLeaderCard["TMemberCard"]["t_member_id"]) {
                        $value["TMemberCard"] = $memberLeaderCard["TMemberCard"];
                        $mCard = $this->MCard->getDataById($memberLeaderCard["TMemberCard"]["m_card_id"]);
                        $value["MCard"] = $mCard;
                        break;
                    }
                }

                $tContactHistories[] = $value;
            }
            $avatarUrls = $this->_getAvatars($idList);

        }
        // トレードデータ
        $memberTrade  = $this->TMemberTrade->getTMemberTrade($this->member["id"], $id);
        $memberTradeTo    = $this->TMemberTrade->getTMemberTrade($id, $this->member["id"]);
        // トレードが有効か
        $tradeEnable    = $this->_isTradeEnable($memberTrade);
        $tradeEnableTo  = $this->_isTradeEnable($memberTradeTo);

        // 仲間判定
        $isFriend = $this->TFriend->isFriend($memberId, $id);
        if(!$isFriend){
            // 仲間申請状態を取得
            $isApply = $this->TFriendTmp->isApplyFriendTmp($memberId, $id);
            if(!$isApply){
                $isApplied = $this->TFriendTmp->isApplyFriendTmp($id, $memberId);
            } else {
                $isApplied = false;
            }
        } else {
            $isApply = false;
            $isApplied = false;
        }

        // ｼﾘｰｽﾞ数
        $seriesNum = $this->TMemberSeries->getMemberSeriesCnt($id);

        // 図鑑公開状態
        $collectionOpen = true;
        $tMemberColleSt  = $this->TMemberCardCollection->getState($id);
        if(empty($tMemberColleSt) || empty($tMemberColleSt["id"])){
            // 取得できなければ非公開
            $collectionOpen = false;
        }
        // 非公開
        if(empty($tMemberColleSt["state"])){
            $collectionOpen = false;
        // 仲間まで公開
        } else if($tMemberColleSt["state"] == 1 && !$isFriend){
            $collectionOpen = false;
        }

        // 公開倉庫取得
        $storageListData = $this->TMemberStorage->getTMemberStorages($id,false,$isFriend);
        if(empty($storageListData)){
            $storageCnt = 0;
        } else {
            $storageCnt = count($storageListData);
        }

        // 会員欲しいもの
        $wishList = array();
        if($isFriend){
            $wishData = $this->TMemberWant->getTMemberWant($id);
            if(!empty($wishData)){

                $this->MTreasure = ClassRegistry::init("MTreasure");
                for($i=1;$i<=5;$i++){
                    if(!empty($wishData["item_type_".$i]) && !empty($wishData["item_id_".$i])){
                        $itemData = array();
                        switch($wishData["item_type_".$i]){
                            case WANTED_TYPE_CARD:
                                $data = $this->MCard->getDataById($wishData["item_id_".$i]);
                                if(!empty($data)){
                                    $itemData["type"]       = $wishData["item_type_".$i];
                                    $itemData["id"]         = $wishData["item_id_".$i];
                                    $itemData["set_date"]   = $wishData["set_date_".$i];
                                    $itemData["slot"]       = $i;
                                    $itemData["MCard"]      = $data;
                                    $itemData["pre_type"]   = PRE_TYPE_CARD;
                                    $itemData["haveNum"]    = $this->TMemberCard->getSameCardCount($this->member["id"],$wishData["item_id_".$i],array("leader_flg" => FLG_OFF));
                                }
                                break;
                            //case WANTED_TYPE_ITEM:
                            //    break;
                            case WANTED_TYPE_TRE:
                                $data = $this->MTreasure->getDataById($wishData["item_id_".$i]);
                                if(!empty($data)){
                                    $itemData["type"]       = $wishData["item_type_".$i];
                                    $itemData["id"]         = $wishData["item_id_".$i];
                                    $itemData["set_date"]   = $wishData["set_date_".$i];
                                    $itemData["slot"]       = $i;
                                    $itemData["MTreasure"]  = $data;
                                    $itemData["pre_type"]   = PRE_TYPE_TRE;
                                    $series =  $this->TMemberSeries->getMemberSeriesBySeriesId($this->member["id"],$data["m_series_id"]);
                                    if(!empty($series)){
                                        $itemData["haveNum"] = $series["num".$data["sort"]];
                                    } else {
                                        $itemData["haveNum"] = 0;
                                    }
                                }
                                break;
                        }
                        if(!empty($itemData)){
                            $wishList[] = $itemData;
                        }
                    }
                }
            }
        }

        // 現在のステージ
        $tMemberStage = $this->TMemberStage->getLastStage($this->member["id"]);

        $this->set("myMemberId"           , $memberId);
        $this->set("myMember"             , $myMember);
        $this->set("member"               , $member);
        $this->set("profileText"          , $profileText);
        $this->set("leaderCard"           , $leaderCard);
        $this->set("tContactHistories"    , $tContactHistories);
        $this->set("avatarUrls"           , $avatarUrls);
        $this->set("memberTrade"          , $memberTrade);
        $this->set("memberTradeTo"        , $memberTradeTo);
        $this->set("tradeEnable"          , $tradeEnable);
        $this->set("tradeEnableTo"        , $tradeEnableTo);
        $this->set("isFriend"             , $isFriend);
        $this->set("isApply"              , $isApply);
        $this->set("isApplied"            , $isApplied);
        $this->set("collectionOpen"       , $collectionOpen);
        $this->set("storageCnt"           , $storageCnt);
        $this->set("wishList"             , $wishList);
        $this->set("seriesNum"            , $seriesNum);
        $this->set("tMemberStage"         , $tMemberStage);
        $this->set("highStatusCards"       , $highStatusCards);
        $this->set("isBlackList"          , $isBlackList);

    }

    /**
     * ログインボーナス
     */
    public function login(){

        // 設定ファイルを読み込む
        config('login_config');
        $LoginConfig = new LoginConfig();
        $eventid = $LoginConfig->getEventId();
        if($LoginConfig->checkPeriod(true)){
            $this->TMemberLogin = ClassRegistry::init("TMemberLogin");
            // 現在のログインボーナス期間の参加状態
            $loginData = $this->TMemberLogin->getMemberLogin($this->member["id"],$LoginConfig->getEventId());
            $getBonus = $LoginConfig->getBonus($loginData["days"]);
            if(!empty($getBonus)){

                // TODO:結果表示データを生成
                switch($getBonus["type"]){
                    // カード
                    case PRE_TYPE_CARD:
                        $this->MCard = ClassRegistry::init("MCard");
                        $data = $this->MCard->getCardById($getBonus["id"]);
                        if(!empty($data["m_skill_id"])){
                            $this->MSkill = ClassRegistry::init("MSkill");
                            $mSkill = $this->MSkill->getDataById($data["m_skill_id"]);
                            if(!empty($mSkill)){
                                $data["MSkill"] = $mSkill;
                            }
                        }
                        break;
                    // アイテム
                    case PRE_TYPE_ITEM:
                        $this->MItem = ClassRegistry::init("MItem");
                        $data = $this->MItem->getItems($getBonus["id"]);
                        break;
                    // Θ
                    case PRE_TYPE_POINT:
                        $data = array();
                        break;
                    // 絆ポイント
                    case PRE_TYPE_CON_POINT:
                        $data = array();
                        break;
                }
                $this->set("bonus_type"  ,  $getBonus["type"]);
                $this->set("bonus_num"   ,  $getBonus["num"]);
                $this->set("bonus_data"  ,  $data);

            } else {
                $this->redirect("/mypage/index/");
            }
        } else {
            $this->redirect("/mypage/index/");
        }
    }

    /*
     * CM演出
     * @param 会員情報
     * @return CMID
     */
    private function _outputCM($member){

        //----------------------------------------
        // 外部クラスのインスタンス化
        //----------------------------------------
        $this->MCm                = ClassRegistry::init("MCm");
        $this->TMemberCm          = ClassRegistry::init("TMemberCm");

        // オープンしているCMがあるか
        $cms = $this->MCm->getOpenCms();

        if(!empty($cms)){
            foreach($cms as $cm){

                // CM閲覧履歴があるか
                $tMemberCm = $this->TMemberCm->getTMemberCm($this->member["id"], $cm["MCm"]["id"]);
                if(!isset($tMemberCm["id"])){

                    //DB更新
                    $this->TMemberCm->insertTMemberCm($this->member["id"], $cm["MCm"]["id"]);

                    // HTMLの場合
                    if($cm["MCm"]["output"] == 1){

                        $this->redirect($cm["MCm"]["redirect"]);
                        exit;

                    // SWFの場合
                    }else{

                        // SPでSWFを出力するときのみCMIDを返す
                        if($this->MOBILE_DATA['carrier'] == "pc"){
                            if($this->_isiOS()){
                                return $cm["MCm"]["id"];
                            } else {
                                $this->redirect("/mypage/cmFlash/" . $cm["MCm"]["id"]);
                            }
                        }
                        $cahceName = "swf_cm{$cm["MCm"]["id"]}";
                        $xmlFile   = FLASH_XML_PATH . "cm" . DS . "{$cm["MCm"]["id"]}.xml";
                        // 空の場合は連続演出なしマイページ
                        if(empty($cm["MCm"]["redirect"]))	$cm["MCm"]["redirect"] = "/mypage/index/".FLG_OFF."/1";
                        $url       = SITE_URL . $cm["MCm"]["redirect"];
				        //Added by nagata@shlab.jp
				        //$this->disconnectDB();	//Deleted by nagata@shlab.jp(Actionメソッドではない)
				        //End. nagata@shlab.jp
                        //フラッシュ出力
                        App::import('Component', 'SwfUtil');
                        $suc = new SwfUtilComponent($this);

                        $suc->initCache($xmlFile, $cahceName);

                        $url = urlencode($url . "?guid=ON");
                        $url = APPLI_URL . "/?url=" . $url;
                        $suc->set(KEY_RESULT_URL, $url);

                        $suc->outputSwf();
                    }
                }

            }
        }

    }

    /*
     * CM演出
     * @param 会員情報
     * @return boolean SPでSWFを出力する場合true
     */
    private function _outputGachaCM($member){

        config("defines/swf_key_defines");

        $his = date('H:i:s');

        $url = SITE_URL . "/mypage/index/";

        $loginStatusUpdate = false;

        $flashParams = array();

//        // モーニングガチャ
//        if(($his >= GACHA_MORNING_START) && ($his <= GACHA_MORNING_END) && ($member["morning_gacha_status"] == GACHA_STATUS_INIT)){
//
//            define("XML_SWF_CM_MORNING"   , FLASH_XML_PATH . "gacha_morning.xml");                 //モーニング
//            define("XML_CACHE_NAME_CM_MORNING"            , "morning");
//
//            $cahceName = XML_CACHE_NAME_CM_MORNING;
//            $xmlFile   = XML_SWF_CM_MORNING;
//            $url       = SITE_URL . "/gacha/index/";
//
//            if($member["login_gacha_status"] == GACHA_STATUS_INIT)	$loginStatusUpdate = true;
//
//            $this->TMember->updateGachaStatus($this->member["id"], GACHA_SUB_TYPE_MORNING, GACHA_STATUS_FLASH, $loginStatusUpdate);
//
//        // ランチタイムガチャ
//        }elseif(($his >= GACHA_LUNCH_START) && ($his <= GACHA_LUNCH_END) && ($member["lunch_gacha_status"] == GACHA_STATUS_INIT)){
        // ランチタイムガチャ
        if(($his >= GACHA_LUNCH_START) && ($his <= GACHA_LUNCH_END) && ($member["lunch_gacha_status"] == GACHA_STATUS_INIT)){

            define("XML_SWF_CM_LUNCH"     , FLASH_XML_PATH . "gacha_lunch.xml");                   //ランチタイム
            define("XML_CACHE_NAME_CM_LUNCH"              , "lunch");

            $cahceName = XML_CACHE_NAME_CM_LUNCH;
            $xmlFile   = XML_SWF_CM_LUNCH;
            $url       = SITE_URL . "/gacha/index/";

            //if($this->member["gender"] == "male"){
            //    $message  = "只今ﾗﾝﾁﾀｲﾑｻｰﾋﾞｽ中ですよ♪";
            //}else{
            //    $message  = "只今ﾗﾝﾁﾀｲﾑｻｰﾋﾞｽ中だ!";
            //}
            //$flashParams[KEY_MESSAGE] = $message;

            //画像変換
            //App::import('Component', 'ImgUtil');
            //$iuc = new ImgUtilComponent($this);
            //$paths    = $iuc->getNaviImageFilePathForSwf($this->member["gender"]);
            //$navImage = $iuc->getImageDBL($paths["IMAGE"],   $paths["DBL"]);
            //$navImage2 = $iuc->getImageDBL($paths["IMAGE2"],   $paths["DBL2"]);
            //$navImage3 = $iuc->getImageDBL($paths["IMAGE3"],   $paths["DBL3"]);
            //$flashParams[KEY_NAVI_COLORMAP."3"] = $navImage3["colormap"];
            //$flashParams[KEY_NAVI_IMAGE."3"]    = $navImage3["data"];
            //$flashParams[KEY_NAVI_COLORMAP."2"] = $navImage2["colormap"];
            //$flashParams[KEY_NAVI_IMAGE."2"]    = $navImage2["data"];
            //$flashParams[KEY_NAVI_COLORMAP] = $navImage["colormap"];
            //$flashParams[KEY_NAVI_IMAGE]    = $navImage["data"];

            if($member["login_gacha_status"] == GACHA_STATUS_INIT)	$loginStatusUpdate = true;

            $this->TMember->updateGachaStatus($this->member["id"], GACHA_SUB_TYPE_LUNCH, GACHA_STATUS_FLASH, $loginStatusUpdate);

//        // アフターファイブガチャ
//        }elseif(($his >= GACHA_AFTER_START) && ($his <= GACHA_AFTER_END) && ($member["after_gacha_status"] == GACHA_STATUS_INIT)){
//
//            define("XML_SWF_CM_AFTER"     , FLASH_XML_PATH . "gacha_afterfive.xml");                   //アフターファイブ
//            define("XML_CACHE_NAME_CM_AFTER"              , "after");
//
//            $cahceName = XML_CACHE_NAME_CM_AFTER;
//            $xmlFile   = XML_SWF_CM_AFTER;
//            $url       = SITE_URL . "/gacha/index/";
//
//            if($member["login_gacha_status"] == GACHA_STATUS_INIT)	$loginStatusUpdate = true;
//
//            $this->TMember->updateGachaStatus($this->member["id"], GACHA_SUB_TYPE_AFTER, GACHA_STATUS_FLASH, $loginStatusUpdate);

        // ログインガチャ
        }elseif($member["login_gacha_status"] == GACHA_STATUS_INIT){

//            define("XML_SWF_CM_LOGIN"     , FLASH_XML_PATH . "login_gacha_notice.xml");            //ログインガチャ
//            define("XML_CACHE_NAME_CM_LOGIN"              , "login");
//
//            $cahceName = XML_CACHE_NAME_CM_LOGIN;
//            $xmlFile   = XML_SWF_CM_LOGIN;
//            $url       = SITE_URL . "/gacha/index/";

            $this->TMember->updateGachaStatus($this->member["id"], GACHA_SUB_TYPE_LOGIN, GACHA_STATUS_FLASH);
            return false;

        }else{

            return false;
        }

        // SPでSWFを出力するときのみtrueを返す
        if($this->MOBILE_DATA['carrier'] == "pc"){
            if($this->_isiOS()){
                return true;
            } else {
                $this->redirect("/mypage/gachaCmFlash");
            }
        }

        //Added by nagata@shlab.jp
		//$this->disconnectDB();	//Deleted by nagata@shlab.jp(Actionメソッドではない)
        //End. nagata@shlab.jp
        //フラッシュ出力
        App::import('Component', 'SwfUtil');
        $suc = new SwfUtilComponent($this);

        $suc->initCache($xmlFile, $cahceName);

        $url = urlencode($url . "?guid=ON");
        $url = APPLI_URL . "/?url=" . $url;
        $suc->set(KEY_RESULT_URL, $url);

        if (!empty($flashParams)) {
            foreach ($flashParams as $key => $value) {
                $suc->set($key, $value);
            }
        }

        $suc->outputSwf();

    }

     /*
     * ログインボーナス
     * @param 会員情報
     */
    private function _loginBonus(){

        config("defines/swf_key_defines");

        // 設定ファイルを読み込む
        config('login_config');
        $LoginConfig = new LoginConfig();
        if($LoginConfig->checkPeriod()){

            // 更新可能か
            $isUpdate = false;

            $this->TMemberLogin = ClassRegistry::init("TMemberLogin");
            // 現在のログインボーナス期間の参加状態
            $loginData = $this->TMemberLogin->getMemberLogin($this->member["id"],$LoginConfig->getEventId());
            if( empty($loginData) || (date('Ymd') > date('Ymd',strtotime($loginData["modified"])) && $loginData["days"] < $LoginConfig->limitDays ) ){
                try {
                    // トランザクション開始
                    $this->TMemberLogin->begin();

                    // 初参加
                    if( empty($loginData) ){
                        $isUpdate = true;
                        $days = 1;
                        $this->TMemberLogin->insertMemberLogin($this->member["id"],$LoginConfig->getEventId());
                    // 更新
                    } else if(date('Ymd') > date('Ymd',strtotime($loginData["modified"]))){
                        $isUpdate = true;
                        $days = $loginData["days"] + 1;
                        $this->TMemberLogin->updateMemberLogin($loginData["id"],$days);
                    }

                    $getBonus = $LoginConfig->getBonus($days);
                    if(!empty($getBonus)){
                        // 会員プレゼント登録
                        $data = array();
                        $data["type"]               = PRESENT_TYPE_LOGIN;
                        $data["state"]              = FLG_OFF;
                        $data["t_member_id_from"] = 0;
                        $data["t_member_id_to"]   = $this->member["id"];
                        $data["item_type"]          = $getBonus["type"];
                        $data["item_id"]            = $getBonus["id"];
                        $data["item_num"]           = $getBonus["num"];
                        $this->TMemberPresent = ClassRegistry::init("TMemberPresent");
                        $this->TMemberPresent->insertPresent($data);

                        switch($getBonus["type"]){
                            // カード
                            case PRE_TYPE_CARD:
                                $this->MCard = ClassRegistry::init("MCard");
                                $mCard = $this->MCard->getCardById($getBonus["id"]);
//                                $item["message"] = $mCard["name"]."を".$getBonus["num"]."枚お贈りします。";
                                $item["message"] = $mCard["name"]."を獲得した!".SWF_BRANK."ｷﾞﾌﾄBOXで受け取って契約しよう!";
                                break;
                            // アイテム
                            case PRE_TYPE_ITEM:
                                $this->MItem = ClassRegistry::init("MItem");
                                $mItem = $this->MItem->getItems($getBonus["id"]);
                                if($mItem["type"] == ITEM_TYPE_GACHA_TICKET){
                                    $item["message"] = $mItem["name"]."を".SWF_BRANK.$getBonus["num"]."枚獲得した!".SWF_BRANK."召喚符ｶﾞﾁｬで使おう!";
                                } else {
                                    $item["message"] = $mItem["name"]."を".SWF_BRANK.$getBonus["num"]."個獲得した!".SWF_BRANK."ｷﾞﾌﾄBOXで受け取ろう!";
                                }
                                break;
                            // Θ
                            case PRE_TYPE_POINT:
                                $item["message"] = $getBonus["num"]."θを獲得した!!".SWF_BRANK."合成で使おう!";
                                break;
                            // 絆ポイント
                            case PRE_TYPE_CON_POINT:
                                $item["message"] = $getBonus["num"]."絆ptを獲得した!".SWF_BRANK."絆召喚ｶﾞﾁｬで使おう!!";
                                break;
                        }
                    }

                    // コミット処理
                    $this->TMemberLogin->commit();
                } catch (Exception $e) {

                    // ロールバック処理
                    $this->TMemberLogin->rollback();

                    // エラーログ書き出し
                    $this->writeExceptionLog($e, "ログインボーナス処理");

                    // エラー画面へリダイレクト
                    $this->redirectFatalError();

                }
                if($this->MOBILE_DATA['carrier'] == "pc"){
                    if($this->_isiOS()){
                        return true;
                    } else {
                        $this->redirect("/mypage/loginBonusFlash");
                    }
                }

            }

            if($isUpdate){

                $is_first = 0;
                if($days == 1){
                    $cnt = $this->TMemberLogin->getMemberLoginCount($this->member["id"]);
                    if($cnt == 1){
                        $is_first = 1;
                    }
                }

                define("XML_SWF_LOGIN_BOUNS"            , FLASH_XML_PATH . "login.xml");
                define("XML_CACHE_NAME_LOGIN_BOUNS"     , "loginbouns");

                define("KEY_LOGIN_DAYS"  , "LOGIN_DAYS");        // ログイン日数

                $cahceName = XML_CACHE_NAME_LOGIN_BOUNS;
                $xmlFile   = XML_SWF_LOGIN_BOUNS;

                $url = SITE_URL . "/mypage/index/";

                $message = "ｽﾀﾝﾌﾟが".$days."個たまった!";
                if(isset($item)){
                    //$url = SITE_URL . "/mypage/login/";
                    $message .= SWF_BRANK.$item["message"];
                    $url = SITE_URL . "/present/inbox_type/";
                }

                //画像変換
                App::import('Component', 'ImgUtil');
                $iuc = new ImgUtilComponent($this);
                $paths = $iuc->getImageFilePathForLoginSwf($LoginConfig->getEventId());
                $BGData = $iuc->getImageDBL($paths["BG"],   $paths["BG_DBL"]);

		        //Added by nagata@shlab.jp
				//$this->disconnectDB();	//Deleted by nagata@shlab.jp(Actionメソッドではない)
		        //End. nagata@shlab.jp
                //フラッシュ出力
                App::import('Component', 'SwfUtil');
                $suc = new SwfUtilComponent($this);

                $suc->initCache($xmlFile, $cahceName);

                $url = urlencode($url . "?guid=ON");
                $url = APPLI_URL . "/?url=" . $url;
                $suc->set(KEY_RESULT_URL    , $url);
                $suc->set(KEY_LOGIN_DAYS    , $days);
                $suc->set(KEY_MESSAGE       , $message);
                $suc->set(KEY_BG_COLORMAP   , $BGData["colormap"] );
                $suc->set(KEY_BG_IMAGE      , $BGData["data"]);
                $suc->set("IS_FIRST"        , $is_first);


                $suc->outputSwf();
            }
        }

        return false;
    }

    /*
     * ログインボーナス
     * @param 会員情報
     */
    public function loginBonusFlash(){

        if($this->MOBILE_DATA['carrier'] != "pc"){
            $this->redirect("/mypage/index");
        }
        config("defines/swf_key_defines");

        // 設定ファイルを読み込む
        config('login_config');
        $LoginConfig = new LoginConfig();
        $this->TMemberLogin = ClassRegistry::init("TMemberLogin");
        // 現在のログインボーナス期間の参加状態
        $loginData = $this->TMemberLogin->getMemberLogin($this->member["id"],$LoginConfig->getEventId());
        if((strtoTime($loginData["modified"]) + 86400) < time()){
            exit;
        }
        $getBonus = $LoginConfig->getBonus($loginData["days"]);
        $days = $loginData["days"];
        if(!empty($getBonus)){

            switch($getBonus["type"]){
            // カード
            case PRE_TYPE_CARD:
                $this->MCard = ClassRegistry::init("MCard");
                $mCard = $this->MCard->getCardById($getBonus["id"]);
//                                $item["message"] = $mCard["name"]."を".$getBonus["num"]."枚お贈りします。";
                $item["message"] = $mCard["name"]."を獲得した!".SWF_BRANK."ｷﾞﾌﾄBOXで受け取って契約しよう!";
                break;
            // アイテム
            case PRE_TYPE_ITEM:
                $this->MItem = ClassRegistry::init("MItem");
                $mItem = $this->MItem->getItems($getBonus["id"]);
                if($mItem["type"] == ITEM_TYPE_GACHA_TICKET){
                    $item["message"] = $mItem["name"]."を".SWF_BRANK.$getBonus["num"]."枚獲得した!".SWF_BRANK."召喚符ｶﾞﾁｬで使おう!";
                } else {
                    $item["message"] = $mItem["name"]."を".SWF_BRANK.$getBonus["num"]."個獲得した!".SWF_BRANK."ｷﾞﾌﾄBOXで受け取ろう!";
                }
                break;
            // Θ
            case PRE_TYPE_POINT:
                $item["message"] = $getBonus["num"]."θを獲得した!!".SWF_BRANK."合成で使おう!";
                break;
            // 絆ポイント
            case PRE_TYPE_CON_POINT:
                $item["message"] = $getBonus["num"]."絆ptを獲得した!".SWF_BRANK."絆召喚ｶﾞﾁｬで使おう!!";
                break;
            }
        }
        $is_first = 0;
        if($days == 1){
            $cnt = $this->TMemberLogin->getMemberLoginCount($this->member["id"]);
            if($cnt == 1){
                $is_first = 1;
            }
        }

        define("XML_SWF_LOGIN_BOUNS"            , FLASH_XML_PATH_SP . "login.xml");
        define("XML_CACHE_NAME_LOGIN_BOUNS"     , "loginbouns_sp");

        define("KEY_LOGIN_DAYS"  , "LOGIN_DAYS");        // ログイン日数

        $cahceName = XML_CACHE_NAME_LOGIN_BOUNS;
        $xmlFile   = XML_SWF_LOGIN_BOUNS;

        $url = SITE_URL . "/mypage/index/";

        $message = "ｽﾀﾝﾌﾟが".$days."個たまった!";
        if(isset($item)){
            //$url = SITE_URL . "/mypage/login/";
            $message .= SWF_BRANK.$item["message"];
            $url = SITE_URL . "/present/inbox_type/";
        }

        //Added by nagata@shlab.jp
        $this->disconnectDB();
        //End. nagata@shlab.jp
        //画像変換
        App::import('Component', 'ImgUtil');
        $iuc = new ImgUtilComponent($this);
        $paths = $iuc->getImageFilePathForLoginSwf($LoginConfig->getEventId());
        $BGData = $iuc->getImageDBL($paths["BG"],   $paths["BG_DBL"]);

        //フラッシュ出力
        App::import('Component', 'SwfUtil');
        $suc = new SwfUtilComponent($this);

        $suc->initCache($xmlFile, $cahceName);

        $url = urlencode($url . "?guid=ON");
        $url = APPLI_URL_SP . "/?url=" . $url;
        $suc->set(KEY_RESULT_URL    , $url);
        $suc->set(KEY_LOGIN_DAYS    , $days);
        $suc->set(KEY_MESSAGE       , $message);
        $suc->set(KEY_BG_COLORMAP   , $BGData["colormap"] );
        $suc->set(KEY_BG_IMAGE      , $BGData["data"]);
        $suc->set("IS_FIRST"        , $is_first);


        $suc->outputSwf();

    }

    /*
     * マイページFlash
     */
    public function mypage_flash(){

        $this->TMember      = ClassRegistry::init("TMember");
        $this->TMemberCard  = ClassRegistry::init("TMemberCard");
        $this->MCard        = ClassRegistry::init("MCard");

        $member = $this->TMember->getMemberStatus($this->member["id"]);

        $leader = $this->TMemberCard->getCard($this->member["id"], $member["t_member_card_id"]);
        $highStatusData = $this->TMemberCard->getMemberCardsHigh($this->member["id"], 9);
        $i = 1;
        $highStatusCards = array();
        $highStatusCards[$i] = $this->MCard->getDataById($leader["m_card_id"]);
        if(!empty($highStatusData)){
            foreach ($highStatusData as $key => $value) {
                $i++;
                $highStatusCards[$i] = $this->MCard->getDataById($value[0]["m_card_id"]);
            }
        }

        config("defines/swf_key_defines");


        define("XML_SWF_MYPAGE"            , FLASH_XML_PATH . "mypage.xml");
        define("XML_CACHE_NAME_MYPAGE"     , "mypage");


        $xmlFile     = XML_SWF_MYPAGE;
        $cacheName   = XML_CACHE_NAME_MYPAGE;

        // スマホ
        if($this->MOBILE_DATA['carrier'] == "pc"){
            $xmlFile = str_replace(FLASH_XML_PATH, FLASH_XML_PATH_SP,$xmlFile);
            $cacheName .= "_sp";
        }


        //Added by nagata@shlab.jp
        $this->disconnectDB();
        //End. nagata@shlab.jp
        //画像変換
        App::import('Component', 'ImgUtil');
        $iuc = new ImgUtilComponent($this);


        // TODO:デッキデータを取得
        for($i=0;$i<=10;$i++){
            if($i<10){
                $no = "0".$i;
            } else {
                $no = $i;
            }
            // デッキにセットされているか
            if(!empty($highStatusCards[$i])){
                $flashParams["CARD_".$no."_IN"]       = 1;
                $flashParams["CARD_".$no."_RARE"]     = $highStatusCards[$i]["rare"];
                $cardImageData = $iuc->getImageDBL($iuc->getFilePath(IMAGE_TYPE_CARD, $highStatusCards[$i]["id"], SIZETYPE_BUP),   $iuc->getFilePath(IMAGE_TYPE_CARD, $highStatusCards[$i]["id"], SIZETYPE_BUP, true));   // カード
                $flashParams["CARD_".$no."_IMAGE"]    = $cardImageData["data"];
                $flashParams["CARD_".$no."_COLORMAP"] = $cardImageData["colormap"];
            } else {
                $flashParams["CARD_".$no."_IN"]       = 0;
                $flashParams["CARD_".$no."_RARE"]     = 1;
                // TODO:ダミーデータを用意
                $flashParams["CARD_".$no."_IMAGE"]    = "eNrtwUEBADAIAKHZP/Rpi32AqncGAAAAAOCTBSmnGJ0=";
                $flashParams["CARD_".$no."_COLORMAP"] = "1";
            }
        }


        //$cost = intval(($member["atk_point_now"] / $member["atk_point_max"]) * 100);
        //$paths = $iuc->getImageFilePathForCostGage($cost);
        //$CostGageData = $iuc->getImageDBL($paths["GAGE"],   $paths["GAGE_DBL"]);
        //$flashParams["GAGE_IMAGE"]    = $CostGageData["data"];
        //$flashParams["GAGE_COLORMAP"] = $CostGageData["colormap"];
        //$Num100Data = $iuc->getImageDBL($paths["NUM100"],   $paths["NUM100_DBL"]);
        //$flashParams["NUM100_IMAGE"]    = $Num100Data["data"];
        //$flashParams["NUM100_COLORMAP"] = $Num100Data["colormap"];
        //$Num10Data = $iuc->getImageDBL($paths["NUM10"],   $paths["NUM10_DBL"]);
        //$flashParams["NUM10_IMAGE"]    = $Num10Data["data"];
        //$flashParams["NUM10_COLORMAP"] = $Num10Data["colormap"];
        //$Num1Data = $iuc->getImageDBL($paths["NUM1"],   $paths["NUM1_DBL"]);
        //$flashParams["NUM1_IMAGE"]    = $Num1Data["data"];
        //$flashParams["NUM1_COLORMAP"] = $Num1Data["colormap"];




        //フラッシュ出力
        App::import('Component', 'SwfUtil');
        $suc = new SwfUtilComponent($this);

        $suc->initCache($xmlFile, $cacheName);

        foreach ($flashParams as $key => $value) {
            $suc->set($key, $value);
        }
        $suc->outputSwf();

    }

    /**
     * CM演出のみ
     * @param $cmId m_cms.id
     */
    public function cmFlash($cmId = 0){

        if($this->MOBILE_DATA['carrier'] != "pc"){
            $this->redirect("/mypage/index");
        }

        config("defines/swf_key_defines");
        $this->MCm                = ClassRegistry::init("MCm");

        // オープンしているCMがあるか
        $cms = $this->MCm->getOpenCms();
        if(empty($cms)){
            exit;
        }

        foreach($cms as $cm){
            // 指定したIDのCMがあるか
            if ($cm["MCm"]["id"] == $cmId) {
                // HTMLの場合
                if($cm["MCm"]["output"] == 1){
                    exit;
                }
                // SWFの場合
                $cahceName = "swf_cm{$cm["MCm"]["id"]}_sp";
                $xmlFile   = FLASH_XML_PATH_SP . "cm" . DS . "{$cm["MCm"]["id"]}.xml";
                // 空の場合は連続演出なしマイページ
                if(empty($cm["MCm"]["redirect"]))	$cm["MCm"]["redirect"] = "/mypage/index/".FLG_OFF."/1";
                $url       = SITE_URL . $cm["MCm"]["redirect"];
		        //Added by nagata@shlab.jp
		        $this->disconnectDB();
		        //End. nagata@shlab.jp
                //フラッシュ出力
                App::import('Component', 'SwfUtil');
                $suc = new SwfUtilComponent($this);

                $suc->initCache($xmlFile, $cahceName);

                $url = urlencode($url . "?guid=ON");
                $url = APPLI_URL_SP . "/?url=" . $url;
                $suc->set(KEY_RESULT_URL, $url);

                $suc->outputSwf();
            }
        }
        exit;
    }

    /**
     * ガチャCM演出のみ
     */
    public function gachaCmFlash(){

        if($this->MOBILE_DATA['carrier'] != "pc"){
            $this->redirect("/mypage/index");
        }

        config("defines/swf_key_defines");

        $his = date('H:i:s');

        $url = SITE_URL . "/mypage/index/";

        $flashParams = array();

        // ランチタイムガチャ
        if(($his >= GACHA_LUNCH_START) && ($his <= GACHA_LUNCH_END)){

            define("XML_SWF_CM_LUNCH"     , FLASH_XML_PATH_SP . "gacha_lunch.xml");                   //ランチタイム
            define("XML_CACHE_NAME_CM_LUNCH"              , "lunch_sp");

            $cahceName = XML_CACHE_NAME_CM_LUNCH;
            $xmlFile   = XML_SWF_CM_LUNCH;
            $url       = SITE_URL . "/gacha/index/";

            //if($this->member["gender"] == "male"){
            //    $message  = "只今ﾗﾝﾁﾀｲﾑｻｰﾋﾞｽ中ですよ♪";
            //}else{
            //    $message  = "只今ﾗﾝﾁﾀｲﾑｻｰﾋﾞｽ中だ!";
            //}
            //$flashParams[KEY_MESSAGE] = $message;

            //画像変換
            //App::import('Component', 'ImgUtil');
            //$iuc = new ImgUtilComponent($this);
            //$paths    = $iuc->getNaviImageFilePathForSwf($this->member["gender"]);
            //$navImage = $iuc->getImageDBL($paths["IMAGE"],   $paths["DBL"]);
            //$navImage2 = $iuc->getImageDBL($paths["IMAGE2"],   $paths["DBL2"]);
            //$navImage3 = $iuc->getImageDBL($paths["IMAGE3"],   $paths["DBL3"]);
            //$flashParams[KEY_NAVI_COLORMAP."3"] = $navImage3["colormap"];
            //$flashParams[KEY_NAVI_IMAGE."3"]    = $navImage3["data"];
            //$flashParams[KEY_NAVI_COLORMAP."2"] = $navImage2["colormap"];
            //$flashParams[KEY_NAVI_IMAGE."2"]    = $navImage2["data"];
            //$flashParams[KEY_NAVI_COLORMAP] = $navImage["colormap"];
            //$flashParams[KEY_NAVI_IMAGE]    = $navImage["data"];

        }else{
            exit;
        }

        //Added by nagata@shlab.jp
        $this->disconnectDB();
        //End. nagata@shlab.jp
        //フラッシュ出力
        App::import('Component', 'SwfUtil');
        $suc = new SwfUtilComponent($this);

        $suc->initCache($xmlFile, $cahceName);

        $url = urlencode($url . "?guid=ON");
        $url = APPLI_URL_SP . "/?url=" . $url;
        $suc->set(KEY_RESULT_URL, $url);

        if (!empty($flashParams)) {
            foreach ($flashParams as $key => $value) {
                $suc->set($key, $value);
            }
        }

        $suc->outputSwf();

    }

}